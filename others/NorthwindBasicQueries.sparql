

# Northwind Basic Sparql Queries


# The following prefixes need to be added to the database or 
# to the beggining of the queries that require them.
# PREFIX     : <http://www.mysparql.com/resource/northwind/>
# PREFIX  rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
# PREFIX  xsd: <http://www.w3.org/2001/XMLSchema#>
# PREFIX foaf: <http://xmlns.com/foaf/0.1/>
# PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


# Selecting all triples in the default graph
SELECT ?subject ?predicate ?object
WHERE {
  ?subject ?predicate ?object .
}
ORDER BY ?subject


# The query above can be simplified by using * to return all variables,
# short variables names, omit the period and the WHERE clause.
# The compact version will look like the following.
SELECT * {?s ?p ?o} ORDER BY ?s


# Filtering on a predicate
SELECT * {?s :hasProduct ?o} ORDER BY ?s


# Prefixes and namespaces
# The next three queries return the same results

# Selecting product details using IRI in the triple pattern
SELECT ?p ?o
WHERE {
  <http://www.mysparql.com/resource/northwind/product-2> ?p ?o .
}


# Selecting product details using a Prefix
PREFIX :<http://www.mysparql.com/resource/northwind/>
SELECT ?p ?o
WHERE {
  :product-2 ?p ?o .
}


# Selecting product details using a database namespace
# An empty prefix must be added to the database list of namespaces for this to work.
# In this case the following IRI was added: <http://www.mysparql.com/resource/northwind/>
SELECT ?p ?o
WHERE {
  :product-2 ?p ?o .
}


# Selecting product details
SELECT ?s ?ID ?productName
{
    ?s a :Product .
    ?s   :productName ?productName .
    ?s   :productID ?ID .
}


# Note that in the query above, the subject is repeated three times.
# The subject can be omitted using semicolumns, allowing more
# predicate-object pairs to be added, as per illustrated below.
SELECT ?s ?ID ?productName
WHERE
{
  ?s a :Product ;
       :productName ?productName ;
       :productID ?ID .
}


# Value lists
SELECT ?x WHERE {
  VALUES ?x { 1 2 3 4 }
}


#...to be continued...